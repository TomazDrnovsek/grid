plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

dependencies {
    // ‚úÖ UNCHANGED: Keep existing working dependencies
    implementation "androidx.documentfile:documentfile:1.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2"
}

android {
    // üö® CRITICAL CHANGE: Production package name (you can adjust this)
    namespace = "si.tomazdrnovsek.grid"

    // ‚úÖ GOOGLE PLAY REQUIREMENT: Explicit API 35 for new apps (Aug 2025+)
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // üö® CRITICAL CHANGE: Must match namespace above
        applicationId = "si.tomazdrnovsek.grid"

        // ‚úÖ UNCHANGED: Keep existing minimum SDK support
        minSdk = flutter.minSdkVersion

        // üö® GOOGLE PLAY REQUIREMENT: Explicit API 35 target
        targetSdk = 35

        // ‚úÖ PRODUCTION VERSIONING: Ready for first release
        versionCode = 1
        versionName = "1.0.0"
    }

    // üîê SIGNING CONFIGURATION: Will read from key.properties
    signingConfigs {
        release {
            if (project.hasProperty('android.injected.signing.store.file')) {
                // Used by Android Studio build
                storeFile file(project.property('android.injected.signing.store.file'))
                storePassword project.property('android.injected.signing.store.password')
                keyAlias project.property('android.injected.signing.key.alias')
                keyPassword project.property('android.injected.signing.key.password')
            } else {
                // Read from key.properties file (we'll create this next)
                def keystoreProperties = new Properties()
                def keystorePropertiesFile = rootProject.file('key.properties')
                if (keystorePropertiesFile.exists()) {
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                }
            }
        }
    }

    buildTypes {
        release {
            // üîê PRODUCTION SIGNING: Use release keystore
            signingConfig signingConfigs.release

            // üöÄ MINIMAL OPTIMIZATIONS: Safe for production
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // ‚úÖ UNCHANGED: Keep debug build as-is
        debug {
            // Keep existing debug configuration
        }
    }
}

flutter {
    source = "../.."
}